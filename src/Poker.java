/* 
* Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author cli
 */
public class Poker extends javax.swing.JFrame {

    /**
     * Creates new form Poker
     */
    int diceThrows;
    int playNr;
    boolean restartTrue = false;
    int numberOfRounds = 13;
    int allBonus[] = {100,100,100,100,100,100,100,100,100,100,100,100,100};
        
    public Poker() {
        initComponents();
        initDie();
        initPlayer();
        this.pack();
    }
    
    public void initDie(){
        dice = new Dice[5];
        for (int i = 0; i<5; i++){
            dice[i] = new Dice();
            jPanel1.add(dice[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(40*i, 50, 35, 35));
            dice[i].addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    Dice d =(Dice)evt.getSource();
                }
            });
        }
        diceThrows=3;
    }
    
    public void initPlayer(){
        
        player = new Player[2];
        for (int i = 0; i<2; i++){
            player[i] = new Player();
            getContentPane().add(player[i], new org.netbeans.lib.awtextra.AbsoluteConstraints(20+i*400, 50, 250, 700));
        }
        
        player[0].addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
               if(!player[0].isEnabled()) {
                   playNr=1;
                   nextMove();
               }                
            }
        });
        
        player[1].addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
               if(!player[1].isEnabled()) {
                   playNr=0;
                   nextMove();
               }                
            }
        });
    }
    
    public void nextMove(){
        if (player[0].getMoves()+player[1].getMoves() >= 2*numberOfRounds-1){
            int a = player[0].getSum();
            int b = player[1].getSum();
            if (a > b){
                info.setText("player 1 won");
            } else if (a < b){
                info.setText("player 2 won");
            } else{
                info.setText("draw");
            }
            restartTrue = true;
            throwDice.setText("restart");
            player[1].setVisible(false);
        } else {
            player[playNr].setVisible(true);
            player[1-playNr].setVisible(false);
            for (int i = 0; i < 5; i++){
                dice[i].setSelected(false);
            }
            diceThrows=3;
            throwDice.setEnabled(true);
            player[0].setEnabled(true);
            player[1].setEnabled(true);

            int[] points=new int[5];

            for(int i=0;i<dice.length;i++){
                dice[i].throwDice();
                points[i]=dice[i].getN();
            }
            diceThrows--;
            if (player[playNr].getBonus()){
                player[playNr].setPoints(allBonus);
                player[playNr].setBonus(false);
            } else{
                player[playNr].setPoints(new Combinations(points).getPoints());
            }
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        throwDice = new javax.swing.JButton();
        info = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 220, 194));

        throwDice.setText("throw");
        throwDice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throwDiceActionPerformed(evt);
            }
        });
        getContentPane().add(throwDice, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 320, -1, -1));

        info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(info, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, 140, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void throwDiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throwDiceActionPerformed
        if (restartTrue){
            for (int i = 0; i<player.length;i++){
                player[i].resetGame();
            }
            diceThrows=3;
            playNr=0;
            restartTrue=false;
            throwDice.setText("throw");
        }
        if(diceThrows==3){
            player[playNr].setVisible(true);
            player[1-playNr].setVisible(false);
            for(int i=0;i<dice.length;i++){
                dice[i].setSelected(false);  
                dice[i].setEnabled(true);
            }
        }
    
        int[] points=new int[5];
        
        for(int i=0;i<dice.length;i++){
            if(!dice[i].isSelected()){
                dice[i].throwDice();
            }
            points[i]=dice[i].getN();
        }
            
        diceThrows--;
        if (player[playNr].getBonus()){
            player[playNr].setPoints(allBonus);
            player[playNr].setBonus(false);
        } else{
            player[playNr].setPoints(new Combinations(points).getPoints());
        }
        if(diceThrows==0){
            throwDice.setEnabled(false);
        }    
    }//GEN-LAST:event_throwDiceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Poker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Poker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Poker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Poker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Poker().setVisible(true);
            }
        });
    }

    
    
    private Dice[] dice;
    private Player[] player;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel info;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton throwDice;
    // End of variables declaration//GEN-END:variables
}
